#!/usr/bin/python3
#+
# Example use of pysmb2. This one is based on the smb2-stat-sync.c
# example in the libsmb2 source tree, except it works asynchronously.
#
# Copyright 2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import time
import asyncio
import getopt
import smb2
from smb2 import \
    SMB2

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    []
  )
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the URL of the file to stat")
#end if

loop = asyncio.get_event_loop()

async def mainline() :
    ctx = smb2.Context.create() \
        .set_security_mode(SMB2.NEGOTIATE_SIGNING_ENABLED) \
        .attach_asyncio(loop)
    url = ctx.parse_url(args[0])
    await ctx.connect_share_async(url.server, url.share, url.user)
    info = await ctx.stat_async(url.path)
    fmt_time = lambda t : time.strftime("%Y-%b-%d %H:%M:%S", time.localtime(t))
    sys.stdout.write \
      (
            "type:  %(type)s\n"
            "size:  %(size)d\n"
            "atime: %(atime)s.%(atime_ns)0.9d\n"
            "mtime: %(mtime)s.%(mtime_ns)0.9d\n"
            "ctime: %(ctime)s.%(ctime_ns)0.9d\n"
            "btime: %(btime)s.%(btime_ns)0.9d\n"
        %
            {
                "type" :
                    {SMB2.TYPE_FILE : "FILE", SMB2.TYPE_DIRECTORY : "DIRECTORY"}
                    .get(info.smb2_type, "?"),
                "size" : info.smb2_size,
                "atime" : fmt_time(info.smb2_atime),
                "atime_ns" : info.smb2_atime_nsec,
                "mtime" : fmt_time(info.smb2_mtime),
                "mtime_ns" : info.smb2_mtime_nsec,
                "ctime" : fmt_time(info.smb2_ctime),
                "ctime_ns" : info.smb2_ctime_nsec,
                "btime" : fmt_time(info.smb2_btime),
                "btime_ns" : info.smb2_btime_nsec,
            }
      )
    await ctx.disconnect_share_async()
#end mainline

loop.run_until_complete(mainline())
